use strict;
use Test::More tests => 51;

use Sigrok::SerialPort qw( :const );

is Sigrok::SerialPort::_loaded, 1, "_loaded";

is SP_OK,        0, "SP_OK";
is SP_ERR_ARG,  -1, "SP_ERR_ARG";
is SP_ERR_FAIL, -2, "SP_ERR_FAIL";
is SP_ERR_MEM,  -3, "SP_ERR_MEM";
is SP_ERR_SUPP, -4, "SP_ERR_SUPP";

is SP_MODE_READ,        1, "SP_MODE_READ";
is SP_MODE_WRITE,       2, "SP_MODE_WRITE";
is SP_MODE_READ_WRITE,  3, "SP_MODE_READ_WRITE";

is SP_EVENT_RX_READY, 1, "SP_EVENT_RX_READY";
is SP_EVENT_TX_READY, 2, "SP_EVENT_TX_READY";
is SP_EVENT_ERROR,    4, "SP_EVENT_ERROR";

is SP_BUF_INPUT,  1, "SP_BUF_INPUT";
is SP_BUF_OUTPUT, 2, "SP_BUF_OUTPUT";
is SP_BUF_BOTH,   3, "SP_BUF_BOTH";

is SP_PARITY_INVALID,  -1, "SP_PARITY_INVALID";
is SP_PARITY_NONE,      0, "SP_PARITY_NONE";
is SP_PARITY_ODD,       1, "SP_PARITY_ODD";
is SP_PARITY_EVEN,      2, "SP_PARITY_EVEN";
is SP_PARITY_MARK,      3, "SP_PARITY_MARK";
is SP_PARITY_SPACE,     4, "SP_PARITY_SPACE";

is SP_RTS_INVALID,     -1, "SP_RTS_INVALID";
is SP_RTS_OFF,          0, "SP_RTS_OFF";
is SP_RTS_ON,           1, "SP_RTS_ON";
is SP_RTS_FLOW_CONTROL, 2, "SP_RTS_FLOW_CONTROL";

is SP_CTS_INVALID,     -1, "SP_CTS_INVALID";
is SP_CTS_IGNORE,       0, "SP_CTS_IGNORE";
is SP_CTS_FLOW_CONTROL, 1, "SP_CTS_FLOW_CONTROL";

is SP_DTR_INVALID,     -1, "SP_DTR_INVALID";
is SP_DTR_OFF,          0, "SP_DTR_OFF";
is SP_DTR_ON,           1, "SP_DTR_ON";
is SP_DTR_FLOW_CONTROL, 2, "SP_DTR_FLOW_CONTROL";

is SP_DSR_INVALID,     -1, "SP_DSR_INVALID";
is SP_DSR_IGNORE,       0, "SP_DSR_IGNORE";
is SP_DSR_FLOW_CONTROL, 1, "SP_DSR_FLOW_CONTROL";

is SP_XONXOFF_INVALID, -1, "SP_XONXOFF_INVALID";
is SP_XONXOFF_DISABLED, 0, "SP_XONXOFF_DISABLED";
is SP_XONXOFF_IN,       1, "SP_XONXOFF_IN";
is SP_XONXOFF_OUT,      2, "SP_XONXOFF_OUT";
is SP_XONXOFF_INOUT,    3, "SP_XONXOFF_INOUT";

is SP_FLOWCONTROL_NONE,     0, "SP_FLOWCONTROL_NONE";
is SP_FLOWCONTROL_XONXOFF,  1, "SP_FLOWCONTROL_XONXOFF";
is SP_FLOWCONTROL_RTSCTS,   2, "SP_FLOWCONTROL_RTSCTS";
is SP_FLOWCONTROL_DTRDSR,   3, "SP_FLOWCONTROL_DTRDSR";

is SP_SIG_CTS,  1, "SP_SIG_CTS";
is SP_SIG_DSR,  2, "SP_SIG_DSR";
is SP_SIG_DCD,  4, "SP_SIG_DCD";
is SP_SIG_RI,   8, "SP_SIG_RI";

is SP_TRANSPORT_NATIVE,     0, "SP_TRANSPORT_NATIVE";
is SP_TRANSPORT_USB,        1, "SP_TRANSPORT_USB";
is SP_TRANSPORT_BLUETOOTH,  2, "SP_TRANSPORT_BLUETOOTH";

done_testing;
